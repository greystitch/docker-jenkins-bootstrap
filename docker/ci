#!/usr/bin/env bash

set -e

directories=(traefik jenkins)

show_help() {
    cat << EOF
Usage: ${0##*/} [<directory>] (start|stop|restart|destroy|pull|build) [<args>]
    -h, --help             Display help
EOF
}

parse_cmd_args() {
    local args=()

    while :; do
        case "${1:-}" in
            --)
                shift
                break
                ;;
            *)
                args=("${args[@]} $1")
                ;;
        esac

        shift
    done
}

compose() {
    local args=()

    while :; do
        case "${1:-}" in
            --)
                shift
                break
                ;;
            *)
                args=("${args[@]}" "$1")
                ;;
        esac

        shift
    done

    local dir="$1"
    pushd "$dir" > /dev/null

    echo "[$dir] Running command: docker-compose ${args[@]} ${@:2}"
    docker-compose "${args[@]}" "${@:2}"

    popd > /dev/null
}

build() {
    local dir="$1"

    if [[ -f "$dir/build.sh" ]]; then
        echo "Building Docker images..."
        "$dir/build.sh"
    fi

    compose "build" "--" "$@"
}

up() {
    compose "up" "-d" "--" "$@"
}

start() {
    compose "start" "--" "$@"
}

stop() {
    compose "stop" "--" "$@"
}

restart() {
    compose "restart" "--" "$@"
}

pull() {
    compose "pull" "--" "$@"
}

destroy() {
    compose "kill" "--" "$@"
    compose "rm" "-f" "--" "$@"

    docker network rm ci-net
}

main() {
    local scriptdir=$(dirname "$(readlink -f "$0")")
    pushd "$scriptdir" > /dev/null

    local dirs
    if [[ " ${directories[@]} " =~ " $1 " ]]; then
        dirs=("$1")
        shift
    else
        dirs=("${directories[@]}")
    fi

    local command="$1"
    if [[ -z "$command" ]]; then
        show_help
        exit 1
    fi

    if ! (docker network ls | grep 'ci-net' > /dev/null); then
        docker network create ci-net
    fi

    for dir in "${dirs[@]}"; do
        "$command" "$dir" "${@:2}"
    done

    popd > /dev/null
}

main "$@"
